AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Concerto EC2: Creates a single EC2 instance running Concerto with MySQL database together.
  **WARNING** You may be billed for the AWS resources used if you create a stack from this template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Concerto"
        Parameters:
          - ConcertoPassword
      - Label:
          default: "Domain + TLS"
        Parameters:
          - DomainName
          - Email
      - Label:
          default: "Web"
        Parameters:
          - KeyName
          - InstanceType
      - Label:
          default: "Database"
        Parameters:
          - DBPassword
      - Label:
          default: "VPC"
        Parameters:
          - CIDR
    ParameterLabels:
      KeyName:
        default: "Key pair"
      InstanceType:
        default: "Instance type"
      DomainName:
        default: "Domain"
      Email:
        default: "E-Mail"
      ConcertoPassword:
        default: "Password"
      DBPassword:
        default: "Password"

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: Instance type to use.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  CIDR:
    Description: The private IP address range to be used for VPC
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.10.0.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DomainName:
    Description: The domain name to be used for Concerto
    Type: String
    AllowedPattern: '(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]'
    ConstraintDescription: must be a valid domain name.
  Email:
    Description: Your email to be used with Let's Encrypt CA
    Type: String
    AllowedPattern: '([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)'
    ConstraintDescription: must be a valid email.
  ConcertoPassword:
    Default: changeme
    Description: Concerto admin account password
    Type: String
    MinLength: '8'
    ConstraintDescription: min. 8 characters.
  DBPassword:
    Default: changeme
    Description: Database admin account password
    Type: String
    MinLength: '8'
    ConstraintDescription: min. 8 characters.

Mappings:
  RegionMap:
    us-east-1:
      ami: ami-0de53d8956e8dcf80
    us-east-2:
      ami: ami-02bcbb802e03574ba
    us-west-1:
      ami: ami-0019ef04ac50be30f
    us-west-2:
      ami: ami-061392db613a6357b
    eu-west-1:
      ami: ami-07683a44e80cd32c5
    eu-west-2:
      ami: ami-09ead922c1dad67e4
    eu-west-3:
      ami: ami-0451ae4fd8dd178f7
    eu-central-1:
      ami: ami-09def150731bdbcc2
    eu-north-1:
      ami: ami-d16fe6af
    ap-northeast-1:
      ami: ami-0f9ae750e8274075b
    ap-northeast-2:
      ami: ami-047f7b46bd6dd5d84
    ap-southeast-1:
      ami: ami-0b419c3a4b01d1859
    ap-southeast-2:
      ami: ami-04481c741a0311bbb
    ap-south-1:
      ami: ami-0889b8a448de4fc44
    ca-central-1:
      ami: ami-03338e1f67dae0168
    sa-east-1:
      ami: ami-0669a96e355eac82f

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref CIDR
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDR
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InboundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutBoundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutBoundHTTPSNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  OutBoundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServerInstance
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow ingress via SSH, HTTP, HTTPS ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - ami
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref Subnet
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub
          - |
            #!/usr/bin/env bash

            # System
            yum update -y
            yum install yum-cron
            systemctl enable yum-cron
            service yum-cron start

            # Docker
            amazon-linux-extras install docker
            systemctl enable docker
            service docker start
            usermod -a -G docker ec2-user

            # Docker Compose
            curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            # Concerto
            mkdir /home/concerto
            cd /home/concerto
            wget https://raw.githubusercontent.com/tools4assessment/concerto-v5/master/deploy/docker-compose/tls/docker-compose.yml
            sed -ri 's/^(.*MYSQL_PASSWORD\s*=).*$/\1${DBPassword}/' docker-compose.yml
            sed -ri 's/^(.*MYSQL_ROOT_PASSWORD\s*=).*$/\1${DBPassword}/' docker-compose.yml
            sed -ri 's/^(.*DB_PASSWORD\s*=).*$/\1${DBPassword}/' docker-compose.yml
            sed -ri 's/^(.*CONCERTO_PASSWORD\s*=).*$/\1${ConcertoPassword}/' docker-compose.yml
            docker-compose up -d database concerto

            # TLS
            wget https://raw.githubusercontent.com/tools4assessment/concerto-v5/master/deploy/docker-compose/tls/install_tls.sh
            chmod 775 ./install_tls.sh
            ./install_tls.sh ${DomainName} http://concerto ${Email}
          - DBPassword: !Ref DBPassword
            ConcertoPassword: !Ref ConcertoPassword
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

Outputs:
  URL:
    Value: !Join
      - ''
      - - 'https://'
        - !Ref DomainName
        - '/admin'
    Description: Concerto administration panel URL
  ServerIP:
    Value: !GetAtt
      - WebServerInstance
      - PublicIp
    Description: IP address to point your domain to
